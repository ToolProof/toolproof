import { count } from 'firebase/firestore';
import { useState, useEffect } from 'react';

interface ProblemMockProps {
    counter: number;
}

export default function ProblemMock({ counter }: ProblemMockProps) {
    const [displayText, setDisplayText] = useState('');

    const resources = ['anchor.pdb', 'target.pdb', 'candidate.pdb', 'simulationResult.txt', 'paper.txt'];

    const resourceDescriptions: Record<string, string> = {
        'anchor.pdb': 'An Anchor serves as a starting point for the drug discovery process. An Anchor is usually an existing, though suboptimal, drug (also known as a ligand) for the target disease. Anchors are represented as .pdb (Protein Data Bank) files or SMILES strings, both used to depict molecular structures.',
        'target.pdb': 'The Target is a protein that is known to play a role in the target disease. The AI uses the Anchor to generate a Candidate that is predicted to bind to the Target.',
        'candidate.pdb': 'The Candidate is a molecule that is generated by the AI based on the Anchor and the Target. The Candidate is predicted to bind to the Target and has the potential to be developed into a drug for the target disease.',
        'simulationResult.txt': 'This is the output of a simulation that tests the Candidate\'s ability to bind to the Target. The SimulationResult provides information about the Candidate\'s binding affinity and other properties that are important for drug development.',
        'paper.txt': 'The Paper is an academic publication that describes the drug discovery process and the results of the AI-generated Candidate. The Paper is written by the AI and can be used by Humans to further develop the Candidate into a drug for the target disease.',
    };

    useEffect(() => {
        setDisplayText('');
    }, [counter]);

    const handleClick = (resource: string) => {
        setDisplayText(resourceDescriptions[resource]);
        console.log(resource);
    };

    const foo = (counter: number) => {
        if (counter === 0) {
            return 0;
        } else if (counter === 1) {
            return 2;
        } else if (counter === 2) {
            return 2;
        } else if (counter === 3) {
            return 3;
        } else if (counter === 4) {
            return 3;
        } else if (counter === 5) {
            return 4;
        } else if (counter === 6) {
            return 4;
        } else if (counter === 7) {
            return 5;
        }
    }

    return (
        <div className='flex flex-col items-center w-full h-full p-4 bg-transparent'>
            {/* <h1>Resources</h1> */}
            <ul className='list-none p-0'>
                {resources.slice(0, foo(counter)).map((resource) => (
                    <li
                        key={resource}
                        onClick={() => handleClick(resource)}
                        className='cursor-pointer p-2 m-2 bg-yellow-500 text-white rounded hover:bg-yellow-700 transition-colors'
                    >
                        {resource}
                    </li>
                ))}
            </ul>
            <p className='mt-24'>{displayText}</p>
        </div>
    );
}
import { NodeNameType } from '../classes';


export const nodeDescriptions: Record<NodeNameType, string> = {
    AI: 'Built around a powerful, reflective GPT-style LLM, such as OpenAI\'s o3, the AI is pre-configured to use its parametric capabilities to collaborate with Humans and Webs for drug discovery focused on a specified disease. By leveraging OpenAI\'s structured-outputs feature, the AI can directly generate Candidates in the formats required by respective Webs.',
    Humans: 'Humans interact with the process via a web interface. A Humans in the loop will typically be an expert on the target disease.',
    Webs: 'Webs involve specialized Webs that support the drug discovery process through molecular docking, molecular dynamics, quantum mechanical free energy calculations, and more. These Webs, often Python-based (e.g., AutoDock Vina, Schrödinger Suite), stress-test the Candidate’s ability to bind to target molecules, usually proteins.',
    Data: 'Data is a file-pool that is shared between Humans, Webs, and the AI.',
    Private: 'Private record the AI\'s internal state and serves as a detailed log of every step it takes, allowing it to introspect its own behavior.',
    PrivateInternal: 'Private record the AI\'s internal state and serves as a detailed log of every step it takes, allowing it to introspect its own behavior.',
    Standin: '',
};


export const resourceDescriptions: Record<string, string> = {
    'anchor.pdb': 'An Anchor serves as a starting point for the drug discovery process. An Anchor is usually an existing, though suboptimal, drug (also known as a ligand) for the target disease. Anchors are represented as .pdb (Protein Data Bank) files or SMILES strings, both used to depict molecular structures.',
    'target.pdb': 'The Target is a protein that is known to play a role in the target disease. The AI uses the Anchor to generate a Candidate that is predicted to bind to the Target.',
    'candidate.pdb': 'The Candidate is a molecule that is generated by the AI based on the Anchor and the Target. The Candidate is predicted to bind to the Target and has the potential to be developed into a drug for the target disease.',
    'simulationResults.xyz': 'This is the output of a simulation that tests the Candidate\'s ability to bind to the Target. The .xyz extension indicates that the results consist of files in various file formats.',
    'paper.txt': 'An academic Paper that documents the Agent’s reasoning, the simulation process, and outcomes, offering suggestions for further action or future research.',
};


type Foo = {
    GraphName: string;
    NodeText: string;
    ComputeEngineText: string;
    CloudStorageText: string;
    Description: string;
}


export const pathDescriptions: Record<number, Foo> = {
    0: {
        GraphName: '',
        NodeText: 'Node',
        ComputeEngineText: '',
        CloudStorageText: '',
        Description: 'Use the buttons below to navigate through the graph.',
    },
    1: {
        GraphName: 'RemoteGraph',
        NodeText: 'Implicit Node',
        ComputeEngineText: 'employmentId',
        CloudStorageText: '',
        Description: 'Client writes "employmentId" to ComputeEngine.',
    },
    2: {
        GraphName: 'SuperGraph',
        NodeText: 'NodeFetchEmployment',
        ComputeEngineText: '',
        CloudStorageText: 'employment',
        Description: 'Node reads "employment" from CloudStorage.',
    },
    3: {
        GraphName: 'SuperGraph',
        NodeText: 'NodeFetchEmployment',
        ComputeEngineText: 'employment',
        CloudStorageText: '',
        Description: 'Node writes "employment" to ComputeEngine.',
    },
    4: {
        GraphName: 'AlphaGraph',
        NodeText: 'NodeLoadInputs',
        ComputeEngineText: 'employment',
        CloudStorageText: '',
        Description: 'Node reads "employment" from ComputeEngine.',
    },
    5: {
        GraphName: 'AlphaGraph',
        NodeText: 'NodeLoadInputs',
        ComputeEngineText: '',
        CloudStorageText: 'ligandAnchor, receptor, box',
        Description: 'Node reads "ligandAnchor", "receptor", and "box" from CloudStorage.',
    },
    6: {
        GraphName: 'AlphaGraph',
        NodeText: 'NodeLoadInputs',
        ComputeEngineText: 'ligandAnchor, receptor, box',
        CloudStorageText: '',
        Description: 'Node writes "ligandAnchor", "receptor", and "box" to ComputeEngine.',
    },
};
import { NodeNameType } from '../classes';


export const nodeDescriptions: Record<NodeNameType, string> = {
    Tools: '',
    Graphs: '',
    Clients: '',
    ToolsPrivate: '.',
    GraphsPrivate: '',
    ClientsPrivate: '',
    Resources: '',
};


export const resourceDescriptions: Record<string, string> = {
    'anchor.pdb': 'An Anchor serves as a starting point for the drug discovery process. An Anchor is usually an existing, though suboptimal, drug (also known as a ligand) for the target disease. Anchors are represented as .pdb (Protein Data Bank) files or SMILES strings, both used to depict molecular structures.',
    'target.pdb': 'The Target is a protein that is known to play a role in the target disease. The AI uses the Anchor to generate a Candidate that is predicted to bind to the Target.',
    'candidate.pdb': 'The Candidate is a molecule that is generated by the AI based on the Anchor and the Target. The Candidate is predicted to bind to the Target and has the potential to be developed into a drug for the target disease.',
    'simulationResults.xyz': 'This is the output of a simulation that tests the Candidate\'s ability to bind to the Target. The .xyz extension indicates that the results consist of files in various file formats.',
    'paper.txt': 'An academic Paper that documents the Agentâ€™s reasoning, the simulation process, and outcomes, offering suggestions for further action or future research.',
};


type Foo = {
    ToolsText: string;
    GraphsText: string;
    ClientsText: string;
    Description: string;
}


export const pathDescriptions: Record<number, Foo> = {
    0: {
        ToolsText: '',
        GraphsText: '',
        ClientsText: '',
        Description: 'Use the buttons to navigate. (Disregard the first few steps--we are cheating for now.)',
    },
    1: {
        ToolsText: '',
        GraphsText: '',
        ClientsText: '',
        Description: 'Clients writes employment, anchor, and target to Shared Resourses.',
    },
    2: {
        ToolsText: '',
        GraphsText: 'remoteGraphs: nodeImplicit',
        ClientsText: '',
        Description: 'Clients invokes Graphs and passes employmentId.',
    },
    3: {
        ToolsText: '',
        GraphsText: 'remoteGraphs: nodeImplicit',
        ClientsText: '',
        Description: 'Graphs writes employmentId to its Private Resources',
    },
    4: {
        ToolsText: '',
        GraphsText: 'superGraphs: nodeFetchEmployment',
        ClientsText: '',
        Description: 'Graphs reads employmentId from its Private Resources',
    },
    5: {
        ToolsText: '',
        GraphsText: 'superGraphs: nodeFetchEmployment',
        ClientsText: '',
        Description: 'Graphs reads employment from Shared Resources.',
    },
    6: {
        ToolsText: '',
        GraphsText: 'betaGraphs: nodeLoadInputs',
        ClientsText: '',
        Description: 'Graphs reads anchor and target from Shared Resources.',
    },
    7: {
        ToolsText: '',
        GraphsText: 'betaGraphs: nodeLoadInputs',
        ClientsText: '',
        Description: 'Graphs writes anchor and (chunked) target to its Private Resources.',
    },
    8: {
        ToolsText: '',
        GraphsText: 'betaGraphs: nodeGenerateCandidate',
        ClientsText: '',
        Description: 'Graphs reads anchor and (chunked) target from its Private Resources.',
    },
    9: {
        ToolsText: '',
        GraphsText: 'betaGraphs: nodeGenerateCandidate',
        ClientsText: '',
        Description: 'Graphs writes candidate to its Private Resources.',
    },
    10: {
        ToolsText: '',
        GraphsText: 'betaGraphs: nodeGenerateCandidate',
        ClientsText: '',
        Description: 'Graphs writes candidate to Shared Resources.',
    },
    11: {
        ToolsText: 'schrodinger',
        GraphsText: 'betaGraphs: nodeInvokeDocking',
        ClientsText: '',
        Description: 'Graphs invokes the Schrodinger Tools and passes candidate and target paths.',
    },
    12: {
        ToolsText: 'schrodinger',
        GraphsText: 'betaGraphs: nodeInvokeDocking',
        ClientsText: '',
        Description: 'Schrodinger reads candidate and target from Shared Resources.',
    },
    13: {
        ToolsText: 'schrodinger',
        GraphsText: 'betaGraphs: nodeInvokeDocking',
        ClientsText: '',
        Description: 'Schrodinger runs its workflow, using its Private Resources as scratch space and broadcasting its progress meanwhile.',
    },
    14: {
        ToolsText: 'schrodinger',
        GraphsText: 'betaGraphs: nodeInvokeDocking',
        ClientsText: '',
        Description: 'Schrodinger writes dockingResults (various files) to Shared Resources.',
    },
};
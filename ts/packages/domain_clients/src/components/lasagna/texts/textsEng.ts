import { NodeNameType } from '../classes';


export const nodeDescriptions: Record<NodeNameType, string> = {
    Tool: '',
    Graph: '',
    Client: '',
    ToolPrivate: '.',
    GraphPrivate: '',
    ClientPrivate: '',
    Resources: '',
};


export const resourceDescriptions: Record<string, string> = {
    'anchor.pdb': 'An Anchor serves as a starting point for the drug discovery process. An Anchor is usually an existing, though suboptimal, drug (also known as a ligand) for the target disease. Anchors are represented as .pdb (Protein Data Bank) files or SMILES strings, both used to depict molecular structures.',
    'target.pdb': 'The Target is a protein that is known to play a role in the target disease. The AI uses the Anchor to generate a Candidate that is predicted to bind to the Target.',
    'candidate.pdb': 'The Candidate is a molecule that is generated by the AI based on the Anchor and the Target. The Candidate is predicted to bind to the Target and has the potential to be developed into a drug for the target disease.',
    'simulationResults.xyz': 'This is the output of a simulation that tests the Candidate\'s ability to bind to the Target. The .xyz extension indicates that the results consist of files in various file formats.',
    'paper.txt': 'An academic Paper that documents the Agentâ€™s reasoning, the simulation process, and outcomes, offering suggestions for further action or future research.',
};


type Foo = {
    ToolText: string;
    GraphText: string;
    ClientText: string;
    Description: string;
}


export const pathDescriptions: Record<number, Foo> = {
    0: {
        ToolText: '',
        GraphText: '',
        ClientText: '',
        Description: 'Use the buttons to navigate. (Disregard the first few steps--we are cheating for now.)',
    },
    1: {
        ToolText: '',
        GraphText: '',
        ClientText: '',
        Description: 'Client writes employment, anchor, and target to Shared Resourses.',
    },
    2: {
        ToolText: '',
        GraphText: 'remoteGraph: nodeImplicit',
        ClientText: '',
        Description: 'Client invokes Graph and passes employmentId.',
    },
    3: {
        ToolText: '',
        GraphText: 'remoteGraph: nodeImplicit',
        ClientText: '',
        Description: 'Graph writes employmentId to its Private Resources',
    },
    4: {
        ToolText: '',
        GraphText: 'superGraph: nodeFetchEmployment',
        ClientText: '',
        Description: 'Graph reads employmentId from its Private Resources',
    },
    5: {
        ToolText: '',
        GraphText: 'superGraph: nodeFetchEmployment',
        ClientText: '',
        Description: 'Graph reads employment from Shared Resources.',
    },
    6: {
        ToolText: '',
        GraphText: 'betaGraph: nodeLoadInputs',
        ClientText: '',
        Description: 'Graph reads anchor and target from Shared Resources.',
    },
    7: {
        ToolText: '',
        GraphText: 'betaGraph: nodeLoadInputs',
        ClientText: '',
        Description: 'Graph writes anchor and (chunked) target to its Private Resources.',
    },
    8: {
        ToolText: '',
        GraphText: 'betaGraph: nodeGenerateCandidate',
        ClientText: '',
        Description: 'Graph reads anchor and (chunked) target from its Private Resources.',
    },
    9: {
        ToolText: '',
        GraphText: 'betaGraph: nodeGenerateCandidate',
        ClientText: '',
        Description: 'Graph writes candidate to its Private Resources.',
    },
    10: {
        ToolText: '',
        GraphText: 'betaGraph: nodeGenerateCandidate',
        ClientText: '',
        Description: 'Graph writes candidate to Shared Resources.',
    },
    11: {
        ToolText: 'schrodinger',
        GraphText: 'betaGraph: nodeInvokeDocking',
        ClientText: '',
        Description: 'Graph invokes the Schrodinger Tool and passes candidate and target paths.',
    },
    12: {
        ToolText: 'schrodinger',
        GraphText: 'betaGraph: nodeInvokeDocking',
        ClientText: '',
        Description: 'Schrodinger reads candidate and target from Shared Resources.',
    },
    13: {
        ToolText: 'schrodinger',
        GraphText: 'betaGraph: nodeInvokeDocking',
        ClientText: '',
        Description: 'Schrodinger runs its workflow, using its Private Resources as scratch space and broadcasting its progress meanwhile.',
    },
    14: {
        ToolText: 'schrodinger',
        GraphText: 'betaGraph: nodeInvokeDocking',
        ClientText: '',
        Description: 'Schrodinger writes dockingResults (various files) to Shared Resources.',
    },
};